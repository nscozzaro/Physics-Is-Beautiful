# Generated by Django 2.2.3 on 2019-10-02 10:06

import courses.models.lesson_progress
import courses.models.material
import courses.models.structure
from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('profiles', '0006_profile_profile_views'),
        ('taggit', '0003_taggeditem_add_unique_index'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('djeddit', '0015_auto_20190927_1052'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('position', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Position')),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('published_on', models.DateTimeField(blank=True, null=True, verbose_name='date published')),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('cover_photo', models.ImageField(blank=True, upload_to='')),
                ('description', models.TextField(blank=True, default='', null=True)),
                ('number_of_learners_denormalized', models.IntegerField(blank=True, default=0, null=True)),
                ('setting_units_unlocked', models.BooleanField(blank=True, default=False)),
                ('setting_modules_unlocked', models.BooleanField(blank=True, default=False)),
                ('setting_lessons_unlocked', models.BooleanField(blank=True, default=False)),
                ('setting_publically', models.BooleanField(blank=True, default=False)),
                ('is_default', models.BooleanField(blank=True, default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.Profile')),
                ('collaborators', models.ManyToManyField(related_name='coauthored_courses', to='profiles.Profile')),
                ('last_edit_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='courses_course_last_edit_items', to='profiles.Profile')),
            ],
            options={
                'verbose_name_plural': 'courses',
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('published_on', models.DateTimeField(blank=True, null=True, verbose_name='date published')),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('position', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Position')),
                ('lesson_type', models.IntegerField(choices=[(courses.models.structure.LessonType(0), 0), (courses.models.structure.LessonType(1), 1)])),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.Profile')),
                ('last_edit_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='courses_lesson_last_edit_items', to='profiles.Profile')),
            ],
            options={
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('position', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Position')),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('material_workflow_type', models.IntegerField(choices=[(courses.models.material.MaterialWorkflowType(10), 10), (courses.models.material.MaterialWorkflowType(20), 20), (courses.models.material.MaterialWorkflowType(80), 80), (courses.models.material.MaterialWorkflowType(90), 90)])),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.Profile')),
                ('last_edit_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='courses_material_last_edit_items', to='profiles.Profile')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materials', to='courses.Lesson')),
            ],
            options={
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('published_on', models.DateTimeField(blank=True, null=True, verbose_name='date published')),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('position', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Position')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.Profile')),
                ('last_edit_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='courses_module_last_edit_items', to='profiles.Profile')),
            ],
            options={
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='UUIDTaggedItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField(db_index=True, verbose_name='Object id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses_uuidtaggeditem_tagged_items', to='contenttypes.ContentType', verbose_name='Content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses_uuidtaggeditem_items', to='taggit.Tag')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='UserReaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('anon_session_key', models.CharField(blank=True, max_length=40, null=True, verbose_name='session key')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('answered_on', models.DateTimeField(auto_now_add=True)),
                ('is_correct', models.BooleanField(default=False)),
                ('material', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users_reaction', to='courses.Material')),
                ('profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='material_reactions', to='profiles.Profile')),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('published_on', models.DateTimeField(blank=True, null=True, verbose_name='date published')),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('position', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Position')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.Profile')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='units', to='courses.Course')),
                ('last_edit_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='courses_unit_last_edit_items', to='profiles.Profile')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', related_name='courses_units', through='courses.UUIDTaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='MySQL',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('position', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Position')),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('text', models.TextField()),
                ('expected_output_json', django.contrib.postgres.fields.jsonb.JSONField(default=None)),
                ('schema_SQL', models.TextField()),
                ('schema_SQL_json', django.contrib.postgres.fields.jsonb.JSONField(default=None)),
                ('schema_is_valid', models.BooleanField(default=False)),
                ('query_SQL', models.TextField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.Profile')),
                ('last_edit_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='courses_mysql_last_edit_items', to='profiles.Profile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ModuleAwards',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('module_finished_badge', models.BooleanField(default=False)),
                ('module_completed_award', models.BooleanField(default=False)),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses_users_awards', to='courses.Module')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses_module_awards', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='module',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', related_name='courses_modules', through='courses.UUIDTaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='module',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='courses.Unit'),
        ),
        migrations.CreateModel(
            name='MaterialProblemType',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('position', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Position')),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(db_index=True, max_length=2048, verbose_name='Problem type title')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.Profile')),
                ('last_edit_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='courses_materialproblemtype_last_edit_items', to='profiles.Profile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='material',
            name='material_problem_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materials', to='courses.MaterialProblemType'),
        ),
        migrations.AddField(
            model_name='material',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', related_name='courses_materials', through='courses.UUIDTaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='material',
            name='thread',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='course_material', to='djeddit.Thread'),
        ),
        migrations.CreateModel(
            name='LessonAwards',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lesson_completed_award', models.BooleanField(default=False)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses_users_awards', to='courses.Lesson')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses_lesson_awards', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='lesson',
            name='module',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='courses.Module'),
        ),
        migrations.AddField(
            model_name='lesson',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', related_name='courses_lessons', through='courses.UUIDTaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('position', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Position')),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.Profile')),
                ('last_edit_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='courses_game_last_edit_items', to='profiles.Profile')),
                ('lesson', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='game', to='courses.Lesson')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='course',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', related_name='courses_coursess', through='courses.UUIDTaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='LessonProgress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('anon_session_key', models.CharField(blank=True, max_length=40, null=True, verbose_name='session key')),
                ('score', models.SmallIntegerField(default=0)),
                ('completed_on', models.DateTimeField(blank=True, null=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('status', models.IntegerField(choices=[(courses.models.lesson_progress.Status(0), 0), (courses.models.lesson_progress.Status(10), 10), (courses.models.lesson_progress.Status(20), 20), (courses.models.lesson_progress.Status(30), 30)])),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses_lessons_progress', to='courses.Lesson')),
                ('profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='courses_lessons_progress', to='profiles.Profile')),
            ],
            options={
                'unique_together': {('profile', 'lesson')},
            },
        ),
        migrations.CreateModel(
            name='CourseUserDashboard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_dashboard', to='courses.Course')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses_dashboard', to='profiles.Profile')),
            ],
            options={
                'unique_together': {('profile', 'course')},
            },
        ),
    ]
