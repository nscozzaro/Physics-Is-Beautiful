{"version":3,"sources":["webpack:///./src/sandbox/eval/transpilers/vue/style-compiler/plugins/trim.js","webpack:///./src/sandbox/eval/transpilers/vue/style-compiler/plugins/scope-id.js","webpack:///./src/sandbox/eval/transpilers/vue/style-compiler/loader.js"],"names":["postcss","require","plugin","opts","css","walk","node","type","raws","before","after","selectorParser","root","keyframes","Object","create","each","rewriteSelector","selector","selectors","n","value","spaces","next","remove","insertAfter","attribute","id","process","result","name","params","keys","length","walkDecls","decl","test","prop","split","map","v","trim","join","vals","concat","slice","code","loaderContext","Promise","resolve","reject","query","options","vueOptions","__vueOptions__","vue","plugins","to","path","from","scoped","push","scopeId","sourceMap","cssSourceMap","inline","annotation","prev","undefined","then","messages","forEach","m","addDependency","file","toJSON","transpiledCode","err"],"mappings":"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","file":"static/js/vue-style-compiler.33513681.chunk.js","sourcesContent":["/* eslint-disable */\nconst postcss = require('postcss');\n\n// eslint-disable-next-line no-unused-vars\nexport default postcss.plugin('trim', function(opts) {\n  return function(css) {\n    css.walk(function(node) {\n      if (node.type === 'rule' || node.type === 'atrule') {\n        node.raws.before = node.raws.after = '\\n';\n      }\n    });\n  };\n});\n","/* eslint-disable */\nvar postcss = require('postcss');\nvar selectorParser = require('postcss-selector-parser');\n\nexport default postcss.plugin('add-id', function(opts) {\n  return function(root) {\n    var keyframes = Object.create(null);\n\n    root.each(function rewriteSelector(node) {\n      if (!node.selector) {\n        // handle media queries\n        if (node.type === 'atrule') {\n          if (node.name === 'media') {\n            node.each(rewriteSelector);\n          } else if (node.name === 'keyframes') {\n            // register keyframes\n            keyframes[node.params] = node.params = node.params + '-' + opts.id;\n          }\n        }\n        return;\n      }\n      node.selector = selectorParser(function(selectors) {\n        selectors.each(function(selector) {\n          var node = null;\n          selector.each(function(n) {\n            // \">>>\" combinator\n            if (n.type === 'combinator' && n.value === '>>>') {\n              n.value = ' ';\n              n.spaces.before = n.spaces.after = '';\n              return false;\n            }\n            // /deep/ alias for >>>, since >>> doesn't work in SASS\n            if (n.type === 'tag' && n.value === '/deep/') {\n              var next = n.next();\n              if (next.type === 'combinator' && next.value === ' ') {\n                next.remove();\n              }\n              n.remove();\n              return false;\n            }\n            if (n.type !== 'pseudo' && n.type !== 'combinator') {\n              node = n;\n            }\n          });\n          selector.insertAfter(\n            node,\n            selectorParser.attribute({\n              attribute: opts.id,\n            })\n          );\n        });\n      }).process(node.selector).result;\n    });\n\n    // If keyframes are found in this <style>, find and rewrite animation names\n    // in declarations.\n    // Caveat: this only works for keyframes and animation rules in the same\n    // <style> element.\n    if (Object.keys(keyframes).length) {\n      root.walkDecls(decl => {\n        // individual animation-name declaration\n        if (/-?animation-name$/.test(decl.prop)) {\n          decl.value = decl.value\n            .split(',')\n            .map(v => keyframes[v.trim()] || v.trim())\n            .join(',');\n        }\n        // shorthand\n        if (/-?animation$/.test(decl.prop)) {\n          decl.value = decl.value\n            .split(',')\n            .map(v => {\n              var vals = v.split(/\\s+/);\n              var name = vals[0];\n              if (keyframes[name]) {\n                return [keyframes[name]].concat(vals.slice(1)).join(' ');\n              } else {\n                return v;\n              }\n            })\n            .join(',');\n        }\n      });\n    }\n  };\n});\n","import postcss from 'postcss';\n\nimport { type LoaderContext } from '../../../transpiled-module';\n\nimport trim from './plugins/trim';\nimport scopeId from './plugins/scope-id';\n\nexport default function(code: string, loaderContext: LoaderContext) {\n  return new Promise((resolve, reject) => {\n    const query = loaderContext.options;\n\n    let vueOptions = loaderContext.options.__vueOptions__;\n\n    if (!vueOptions) {\n      vueOptions = {\n        ...loaderContext.options.vue,\n        ...loaderContext.vue,\n      };\n    }\n\n    // TODO autoprefixer\n    const plugins = [trim];\n\n    const options = {\n      to: loaderContext.path,\n      from: loaderContext.path,\n      map: false,\n    };\n\n    // add plugin for vue-loader scoped css rewrite\n    if (query.scoped) {\n      plugins.push(scopeId({ id: query.id }));\n    }\n\n    // source map\n    if (\n      loaderContext.sourceMap &&\n      vueOptions.cssSourceMap !== false &&\n      !loaderContext.map\n    ) {\n      options.map = {\n        inline: false,\n        annotation: false,\n        prev: loaderContext.map,\n      };\n    }\n\n    return (\n      postcss(plugins)\n        // Explcitly give undefined if code is null, otherwise postcss crashses\n        .process(code === null ? undefined : code, options)\n        .then(result => {\n          if (result.messages) {\n            result.messages.forEach(m => {\n              if (m.type === 'dependency') {\n                loaderContext.addDependency(m.file);\n              }\n            });\n          }\n\n          const map = result.map && result.map.toJSON();\n          resolve({ transpiledCode: result.css, sourceMap: map });\n\n          return null; // silence bluebird warning\n        })\n        .catch(err => reject(err))\n    );\n  });\n}\n"],"sourceRoot":""}